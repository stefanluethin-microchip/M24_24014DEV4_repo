# This file was generated by the CI/CD Wizard version 1.0.375.
# See the user guide for information on how to customize and use this file.

#-SL--------------------------------- START --------------------------------------------------
#-SL:  for Jenkins-test intenially selected older IDE/XC32-versions:
#-SL:   MPLABX-v6.15, XC32-v4.21 instead of latest MPLABX-v6.20, XC32-v4.35 (as of 6.4.2024)
#-SL:  This DockerFile consists of 8 parts
#-SL:  part1:  download base-image and checkout certain branch
#-SL:  part2:  update OS and add tools
#-SL:  part3:  download IDE-installer and install
#-SL:  part4:  setup to use network-licenses
#-SL:  part5:  download XC32-installer and install
#-SL:  part6:  download only DFP needed and install/unzip
#-SL:  part7:  download only CMSIS needed and install/unzip
#-SL:  part8:  set MPLABX-configuration
#-SL:

# This file was generated by the CI/CD Wizard version 1.0.375.
# See the user guide for information on how to customize and use this file.

#-SL-part1: ------------------- base-image and branch ---------------------------
#-start from a prepared docker-image with a debian-distro from hub.docker.com
#-SL: basically with 'FROM' docker will download the distro, 
#-SL:   here 'debian' and checkout the branch 'buster-slim'
FROM debian:bookworm-slim

ENV DEBIAN_FRONTEND noninteractive


#-SL-part2: ------------------- update OS and add tools ---------------------------
#-install addOn-tools needed into the preloaded debian-image
#-SL: here as user ROOT some updates are done to the originally downloaded
#-SL:  debian-image and some more tools like 'curl, make, ...' are installed
USER root
RUN dpkg --add-architecture i386 \
 && apt-get update -yq \
 && apt-get install -yq --no-install-recommends \
    ca-certificates \
    curl \
    make \
    unzip \
    procps \
    libusb-1.0-0 \
    libc6 \
 && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*




#-SL-part3: ------------------- download (=curl) IDE-version and install ---------------------------
# Download and install MPLAB X IDE version 6.20 and extend OS-searchpath
ENV MPLABX_VERSION 6.20

#-SL: Download and install MPLAB X IDE version $MPLABX_VERSION
RUN curl -fSL -A "MCHP-DevSystems-CICDDownloadAgent" -o /tmp/mplabx-installer.tar \
		 "https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/MPLABX-v${MPLABX_VERSION}-linux-installer.tar" \
 && tar xf /tmp/mplabx-installer.tar -C /tmp/ && rm /tmp/mplabx-installer.tar  \
 && USER=root ./tmp/MPLABX-v${MPLABX_VERSION}-linux-installer.sh --nox11 \
    -- --unattendedmodeui none --mode unattended \
 && rm ./tmp/MPLABX-v${MPLABX_VERSION}-linux-installer.sh \
 && rm -rf /opt/microchip/mplabx/v${MPLABX_VERSION}/packs/Microchip/*_DFP \
 && rm -rf /opt/microchip/mplabx/v${MPLABX_VERSION}/mplab_platform/browser-lib

#-SL: extend OS-searchpath
ENV PATH /opt/microchip/mplabx/v${MPLABX_VERSION}/mplab_platform/bin:$PATH
ENV PATH /opt/microchip/mplabx/v${MPLABX_VERSION}/mplab_platform/mplab_ipe:$PATH





#-SL-part4: ------------------- network-licenses ---------------------------
# Install MPLAB XC network license
#-SL: with Docker you need network-licenses and cannot use a USB-donglelic
#-SL:  and more over you cannot run tests on HW, so basically can only do:
#-SL:	 xc*-compiles  -> checks, like Misra/Thread-Savety or codeCoverage -> or run Simulations
ENV XCLM_PATH /opt/microchip/mplabx/v${MPLABX_VERSION}/mplab_platform/bin/xclm
RUN /opt/microchip/mplabx/v${MPLABX_VERSION}/mplab_platform/bin/xclm -netfile 5053 'licenses.microchip.com'; exit 0





#-SL-part5: ------------------- download (=curl) XC32-version and install ---------------------------
# Download and install toolchain
ENV TOOLCHAIN xc32
ENV TOOLCHAIN_VERSION 4.21
#-SL: Download and install XC32-v4.21
RUN curl -fSL -A "MCHP-DevSystems-CICDDownloadAgent" -o /tmp/${TOOLCHAIN}.run \
    "https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/${TOOLCHAIN}-v${TOOLCHAIN_VERSION}-full-install-linux-x64-installer.run" \
 && chmod a+x /tmp/${TOOLCHAIN}.run \
 && /tmp/${TOOLCHAIN}.run --mode unattended --unattendedmodeui none \
    --netservername localhost --LicenseType NetworkMode \
 && rm /tmp/${TOOLCHAIN}.run
ENV PATH /opt/microchip/${TOOLCHAIN}/v${TOOLCHAIN_VERSION}/bin:$PATH





#-SL-part6: ------------------- download only DFP needed -------------------------------
#-SL:  why do we need to download any DFP again, as it comes with MLABX?
#-SL: Well check above IDE-install cmdLine you find line:
#-SL:       && rm -rf /opt/microchip/mplabx/v${MPLABX_VERSION}/packs/Microchip/*_DFP
#-SL: -> so basically after downloading+installing all DFPs with MPLABX, they're removed again to
#-SL:    save space and then only the one needed is re-download and installed or basically simply unzipped
# DFPs needed for samd21xplp configuration
# Download and install Microchip.SAMD21_DFP.3.6.133
RUN curl -fSL -A "Mozilla/4.0" -o /tmp/tmp-pack.atpack \
         "https://packs.download.microchip.com/Microchip.SAMD21_DFP.3.6.144.atpack" \
 && mkdir -p /opt/microchip/mplabx/v${MPLABX_VERSION}/packs/SAMD21_DFP/3.6.144 \
 && unzip -o /tmp/tmp-pack.atpack -d /opt/microchip/mplabx/v${MPLABX_VERSION}/packs/SAMD21_DFP/3.6.144 \
 && rm /tmp/tmp-pack.atpack





#-SL-part7: ------------------- download CMSIS -------------------------------
#-SL: like for DFPs above only the needed CMSIS is downloaded again, after removing all after IDE-install-cleanup
# Download and install ARM.CMSIS.5.8.0
RUN curl -fSL -A "Mozilla/4.0" -o /tmp/tmp-pack.atpack \
         "https://packs.download.microchip.com/ARM.CMSIS.5.8.0.atpack" \
 && mkdir -p /opt/microchip/mplabx/v${MPLABX_VERSION}/packs/CMSIS/5.8.0 \
 && unzip -o /tmp/tmp-pack.atpack -d /opt/microchip/mplabx/v${MPLABX_VERSION}/packs/CMSIS/5.8.0 \
 && rm /tmp/tmp-pack.atpack



#-SL-part8: ------------------- set the MPLABX-configuration -------------------------------
ENV BUILD_CONFIGURATION samd21xplp


#-SL--------------------------------- END --------------------------------------------------