#!/usr/bin/env groovy

// This file was generated by the CI/CD Wizard version 1.0.375.
// See the user guide for information on how to customize and use this file.
//-SL: Jenkins Pipeline syntax type = Declarative

pipeline {
    environment {
        DEMO_V = "demo_simple_d1"
		JPIPELINE = "files_cicd/Jenkinsfile_d2_docker_24014dev4"
		DOCKERFILENAME = "files_cicd/Dockerfile_4_d2_docker_24014dev4"		
		 //-SL: root path to tools and IDE
        MPLABX_ROOT = "/opt/microchip/mplabx"
        MPLABX_V_2_USE = "v6.20"
        MPLABX_EXE = "mplab_ide"
         //-SL: /opt/microchip/mplabx/v6.20/mplab_platform/bin/mplab_ide
        MPLABX_EXE_2_USE = "${MPLABX_ROOT}" + "/" + "${MPLABX_V_2_USE}" + "/mplab_platform/bin/" + "${MPLABX_EXE}"
         //-SL: /opt/microchip/mplabx/v6.20/mplab_platform/bin/xclm
        XCLM_EXE = "xclm"
        XCLM_EXE_2_USE   = "${MPLABX_ROOT}" + "/" + "${MPLABX_V_2_USE}" + "/mplab_platform/bin/" + "${XCLM_EXE}"
         //-SL: /opt/microchip/xc32/v4.35/bin/xc32-gcc
        XC32_ROOT = "/opt/microchip/xc32"
        XC32_V_2_USE = "v4.35"
        XC32_GCC_EXE = "xc32-gcc"
        XC32_GCC_2_USE = "${XC32_ROOT}" + "/" + "${XC32_V_2_USE}" + "/bin/" + "${XC32_GCC_EXE}"       
         //-SL: see <https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables>
         //-SL:  which env-variables are known
         //-SL:  eg ${env.WORKSPACE} points to '/var/lib/jenkins/nodes/DEM-LT-M16422u_localJenkinsAgent/workspace/J_test3/'
         //-SL:   for Node/Agent/Slave/Client 'J_test3' created in Jenkins-Master/-Server
        PRJ_DIR_N=   "CICDgh_samd21xplp"
         //-SL: path-2-MPLABX-prj.X relative from Jenkins-Workspace as scripts below first cd's into WS
        PRJ_X_NAME =   "CICDgit_samd21xplp.X"
        PRJ_WS_REL_P = "./" + "${PRJ_DIR_N}" + "/firmware/" + "${PRJ_X_NAME}"
        MPLABX_CFG_N = "samd21xplp"
        PRJ_MK_STR =   "${PRJ_WS_REL_P}" + "@" + "${env.MPLABX_CFG_N}"
		 //-prjMakefilesGenerator to read MPLABX-configuration.xml and create Makefiles
		PRJ_MK_GEN_CALL = "${MPLABX_ROOT}" + "/" + "${MPLABX_V_2_USE}" + "/mplab_platform/bin/" + "prjMakefilesGenerator.sh"
         //-SL: simple bash-scrp to find *.elf-file and print path+name
        ELF_TEST_SCR = "./" + "result_check.sh"
    } //- end environment

    //-SL: instead of 'any agent' use a DockerContainer described in 'Dockerfile_4_J_d2'
	agent any
    stages {
        stage('Build') {
			agent {
				dockerfile  {
					label 'DEM-LT-M16422u_localLnxPC'
					filename 'files_cicd/Dockerfile_4_d2_docker_24014dev4'
					registryUrl "https://hub.docker.com/"
				}
			} //- run 'build' stage in DockerContainer
            steps {
                 sh(
                    label: 'environment check',
                    script: """
						    set +x
                            echo "###-SL: ========================================================================"
                            echo "###-SL:       START Jenkins-Pipeline ${env.JPIPELINE}"
							echo "###-SL:       on agent ${env.DOCKERFILENAME}"
							echo "###-SL:       from ${env.JOB_NAME}"
							echo "###-SL:       START stage:build / step:environment check"
                            echo "###-SL: ========================================================================"
                            echo "###-SL: NOTHING to do here, currently "
							echo "###-SL: Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
							echo "###-SL: prj_root_p = ${env.PRJ_ROOT_P}"							
                            echo "###-SL: WS = ${env.WORKSPACE}"
							echo "###-SL: ========================================================================"
                            echo "###-SL:       END stage:build / step:environment check"
                            echo "###-SL: ========================================================================"	
							set +x
                            """
                   ) //-SL: end 'step: env-check'
                 sh(
                     label: 'cleanup (if needed)',
                     script: """
                            set +x
                            echo "###-SL: ========================================================================"
							echo "###-SL:       START stage:build / step:cleanup"
                            echo "###-SL: ========================================================================"
							cd ${env.WORKSPACE}
                            rm -rf ./build
                            rm -rf ./dist
                            rm -rf ./debug
                            rm -rf .generated_files/
                            rm -rf nbproject/Makefile-*
                            rm -rf nbproject/Package-samd21xplp.bash
                            rm -rf nbproject/private
							echo "###-SL: ========================================================================"
                            echo "###-SL:       END stage:build / step:cleanup"
                            echo "###-SL: ========================================================================"	
							set +x
                            """
                 )  //-SL: end 'step: cleanup'
                 sh(
                     label: 'Generate build makefiles',
                     script: """
                            set +x
                            echo "###-SL: ======================================================================== "
							echo "###-SL:       START stage:build / step:re-creating makefiles for ${PRJ_MK_STR}"
                            echo "###-SL: ======================================================================== "
							 #-full_call: prjMakefilesGenerator.sh -v -f ./CICDgh_samd21xplp/firmware/CICDgit_samd21xplp.X@samd21xplp
							"${PRJ_MK_GEN_CALL}" -v -f ${PRJ_WS_REL_P}@${env.MPLABX_CFG_N}
							echo "###-SL: ========================================================================"
                            echo "###-SL:       END stage:build / step:re-creating makefiles"
                            echo "###-SL: ========================================================================"	
							set +x
                            """
                 )  //-SL: end 'step: update/build Makefiles'
                 sh(
                     label: 'compile = running Makefile',
                     script: """
							set +x
                            echo "###-SL: ========================================================================"
							echo "###-SL:       START stage:build / step: compile=make"
                            echo "###-SL: ========================================================================"
                            cd "${env.PRJ_WS_REL_P}"
                            echo "###-SL: current path `pwd`"
                            make clean
                            make CONF="${env.MPLABX_CFG_N}"
							echo "###-SL: ========================================================================"
                            echo "###-SL:       END stage:build / step:compile=make"
                            echo "###-SL: ========================================================================"	
							set +x
                            """
                 )  //-SL: end 'step: compile-w-make'
                 sh(
                     label: 'compile successful?',
                     script: """
                            set +x
                            echo "###-SL: ========================================================================"
							echo "###-SL:       START stage:build / step: result-check"
                            echo "###-SL: ========================================================================"
							echo "###-SL (start): result check..."
							cd "${env.PRJ_WS_REL_P}"
							chmod +x ${ELF_TEST_SCR}
                            ${ELF_TEST_SCR}
							echo "###-SL (end)"
							echo "###-SL: ========================================================================"
                            echo "###-SL:       END stage:build / step:result-check"
                            echo "###-SL: ========================================================================"	
							set +x
                            """
                 ) //-SL: end 'step: post-proc, check elf exists with bat-script'
            } //-end 'steps' in 'stage=build'
        } //-end stage=build        
    } //-end 'stages'
    
    post {
        //-SL: there're different outcomes 'sucess, failure,..., always' of the
		//-SL:  stages-step that are optional, hence don't have to be specified
        always {
            // Clean workspace after build
			echo "###-SL: ========================================================================"
			echo "###-SL: post / always from current Jenkins-Pipeline ${env.JPIPELINE}"
            echo "###-SL: ========================================================================"	
            //cleanWs()   //-Jenkins-buildin fct to cleanup Workspace
        }
        success {
            echo "###-SL: ========================================================================"
			echo "###-SL: post / success from current Jenkins-Pipeline ${env.JPIPELINE}"
            echo "###-SL: post/success: current path `pwd`"
			echo "###-SL: ========================================================================"
        }
    }  //-end 'post'

} //- end 'pipeline'
